@using System.Threading.Tasks
@using Branch.Web.Areas.Halo5.ViewModels
@using Branch.Web.Areas.Shared.Enums
@using Branch.Web.Areas.Shared.ViewModels
@model ServiceRecordViewModel
@{
	var gamertag = Model.ServiceRecord.PlayerId.Gamertag;
	ViewBag.Title = $"{gamertag}'s Halo 5 Service Record";
	var sidebar = new SidebarViewModel(gamertag, SidebarOption.ServiceRecord);
}

@await Html.PartialAsync("_Header", Model)

@await Html.PartialAsync("/Areas/Shared/Views/_AreaSwitcher", new AreaSwitcherViewModel("2A2D53", "halo5", "", gamertag, Area.Halo5Guardians))

@addTagHelper "*, Branch.Web"

<main class="halo5-service-record">
	<div class="container">
		<div class="row">
			<div class="col-md-9">
				<div class="arena-overview col-md-12">
					<div class="page-header">
						<h3>
							Service Record
							<small>Arena Overview</small>
						</h3>
					</div>
					<div class="row">
						<div class="highest-attained-csr col-md-4">
							@{
								var highestCsr = Model.ServiceRecord.ArenaStats.HighestCsrAttained;
								var highestCsrPlaylist = (await MetadataService.GetPlaylistMetadataAsync()).Results.First(p => p.Id == Model.ServiceRecord.ArenaStats.HighestCsrPlaylistId);
								var csrDesignation = (await MetadataService.GetCsrDesignationMetadataAsync()).Results.First(csr => csr.Id == highestCsr.DesignationId);
								var csrDesignationTier = csrDesignation.Tiers.First(t => t.Id == highestCsr.Tier);
							}

							<h4>Highest Attained Csr</h4>

							<div class="csr-banner" style="background-image: url('@csrDesignation.BannerImageUrl');">
								<img width="130" src="@csrDesignationTier.IconImageUrl" />
								<br />
								<span class="csr-designation">@csrDesignation.Name @csrDesignationTier.Id</span>
								<br />
								<span class="csr-designation-playlist">@highestCsrPlaylist.Name</span>
							</div>
						</div>
						<div class="col-md-8">
							<div class="row col-md-12">
								<div class="tool-of-descruction col-md-6">
									<h4>Tool of Destruction</h4>

									<div class="weapon-preview"
										 style="background-image: url('@((await MetadataService.GetWeaponsMetadataAsync()).Results.First(w => w.Id == Model.ServiceRecord.ArenaStats.WeaponWithMostKills.WeaponId.StockId).SmallIconImageUrl)')"></div>

									<deliminate-number integer="@Model.ServiceRecord.ArenaStats.WeaponWithMostKills.TotalKills" /> Kills
								</div>

								<div class="col-md-6">

								</div>
							</div>
							<div class="row col-md-12">
								<div class="kd-ratio col-md-6">
									<div class="graph-container">
										<canvas id="myChart" width="160" height="160" style="margin: 0 auto;"></canvas>
										<div class="graph-details">
											<span>12.4</span>
											<br>
											KD Spread
										</div>
									</div>

									<div class="graph-legend">
										<div class="entry" style="border-left-color: rgb(61, 61, 124);">
											Kills: @Model.ServiceRecord.ArenaStats.TotalKills
										</div>
										<div class="entry" style="border-left-color: rgb(88, 128, 160);">
											Deaths: @Model.ServiceRecord.ArenaStats.TotalDeaths
										</div>
									</div>
								</div>
								<div class="col-md-6">
									<button class="btn btn-success">Full Arena Stats &raquo;</button>
									<button class="btn btn-success">Arena Match History &raquo;</button>
								</div>
							</div>
						</div>
					</div>
				</div>

				<div class="warzone-overview col-md-12">
					<div class="page-header">
						<h3>
							Service Record
							<small>Warzone Overview</small>
						</h3>
					</div>
					<div class="row">

					</div>
				</div>

				@if (Model.MatchHistory.Results.Any())
				{
					<div class="match-history col-md-12">
						<div class="page-header">
							<h3>
								Recent Matches
								<small>@(Model.MatchHistory.Start-@Model.MatchHistory.Count + 1) of @(Model.ServiceRecord.ArenaStats.TotalGamesCompleted + Model.ServiceRecord.WarzoneStats.TotalGamesCompleted)</small>
							</h3>
						</div>
						@foreach (var match in Model.MatchHistory.Results)
						{
							switch (match.Id.GameMode)
							{
								case GameMode.Arena:
								case GameMode.Custom:
								case GameMode.Warzone:
									@await Html.PartialAsync("Partials/_MatchmakingRecentMatch", match);
									break;

								case GameMode.Campaign:
									@await Html.PartialAsync("Partials/_CampaignRecentMatch", match);
									break;
							}
						}
					</div>
				}
			</div>
			<div class="col-md-3">
				@await Html.PartialAsync("_Sidebar", sidebar)
			</div>
		</div>
	</div>
</main>

@section scripts {
	<script>
		var ctx = document.getElementById("myChart").getContext("2d");

		var data = [
			{
				value: @Model.ServiceRecord.ArenaStats.TotalKills,
				color: "#3d3d7c",
				highlight: "#3d3d60",
				label: "Kills"
			},
			{
				value: @Model.ServiceRecord.ArenaStats.TotalDeaths,
				color: "#5880A0",
				highlight: "#5AD3D1",
				label: "Deaths"
			}
		];
		var options = {
			animate: false,
			percentageInnerCutout: 90,
			showTooltips: false
		};

		var myDoughnutChart = new Chart(ctx).Doughnut(data, options);
	</script>
}