@using Newtonsoft.Json
@model SpecializationsViewModel
@{
	var gamertag = @Model.ServiceRecord.Gamertag;
	ViewBag.Title = $"{gamertag}'s Specializations";
	var sidebar = new SidebarViewModel(gamertag, SidebarOption.Specializations);

	var currentSpecialization = Model.ServiceRecord.Specializations.FirstOrDefault(s => s.IsCurrent && !s.Completed);
	var completeSpecializations = Model.ServiceRecord.Specializations.Where(s => s.Completed);
	var pendingSpecializations = Model.ServiceRecord.Specializations.Where(s => !s.Completed && !s.IsCurrent);
}

@await Html.PartialAsync("_Header", Model)

@await Html.PartialAsync("/Areas/Shared/Views/_AreaSwitcher", new AreaSwitcherViewModel("2A2D53", "halo4", "", gamertag, Area.Halo4))

@addTagHelper "*, Branch.Web"

<main class="halo4-specializations">
	<div class="container">
		<div class="row">
			<div class="col-md-9">
				<div class="overview col-md-12">
					<div class="page-header">
						<h3>@gamertag's Specializations</h3>
					</div>

					@if (currentSpecialization != null)
					{
						<div class="row">
							<div id="current-specialization" class="col-md-12">
								<h2>
									Active Specialization;
								</h2>
								<hr />
								<div class="row specialization">
									<div class="col-md-1"></div>
									<div class="col-md-3 specialization-icon visible-md visible-lg"
										 style="background-image: url('@await MetadataService.ResolveAssetContainerAsync(currentSpecialization.ImageUrl, "large")');"></div>
									<div class="col-md-8">
										<span class="title">
											@currentSpecialization.Name (@currentSpecialization.LevelName)
										</span>
										<br />
										<span class="description">
											@((await MetadataService.GetMetadataAsync()).SpecializationsMetadata.Specializations.First(s => s.Id == currentSpecialization.Id).Description)
										</span>
										<div class="level-progression">
											<span class="level">
												Current Level:
												<strong>
													@currentSpecialization.Level
												</strong>
											</span>
											<div class="progress">
												<div class="progress-bar" role="progressbar"
													 aria-valuenow="@(currentSpecialization.PercentageComplete * 100)"
													 aria-valuemin="0" aria-valuemax="100"
													 style="width: @(currentSpecialization.PercentageComplete * 100)%">
													<span class="sr-only">
														@(currentSpecialization.PercentageComplete * 100)% Complete
													</span>
													<span class="progress-bar-indicator">
														@(currentSpecialization.PercentageComplete * 100)% Complete
													</span>
												</div>
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>
					}

					<div class="row other-shit">
						<div class="col-md-12">
							<ul class="nav nav-tabs" style="margin-bottom: 15px;">
								<li class="active"><a href="#pending" data-toggle="tab">Pending Specializations</a></li>
								<li><a href="#completed" data-toggle="tab">Completed Specializations</a></li>
							</ul>
							<div class="tab-content">
								<div class="col-md-12 tab-pane fade active in" id="pending">
									@if (!pendingSpecializations.Any())
									{
										<div class="row">
											<div class="col-md-12">
												<h4>All Specializations Completed!</h4>
											</div>
										</div>
									}
									else
									{
										foreach (var specialization in pendingSpecializations)
										{
											<div class="row specialization">
												<div class="col-md-1"></div>
												<div class="col-md-3 specialization-icon visible-md visible-lg"
													 style="background-image: url('@await MetadataService.ResolveAssetContainerAsync(specialization.ImageUrl, "large")');"></div>
												<div class="col-md-8">
													<span class="title">
														@specialization.Name
													</span>
													<br />
													<span class="description">
														@((await MetadataService.GetMetadataAsync()).SpecializationsMetadata.Specializations.First(s => s.Id == specialization.Id).Description)
													</span>
												</div>
											</div>
											<hr class="" />
										}
									}
								</div>

								<div class="col-md-12 tab-pane fade in" id="completed">
									@if (!completeSpecializations.Any())
									{
										<div class="row">
											<div class="col-md-12">
												<h4>You haven't completed any specializations :(</h4>
											</div>
										</div>
									}
									else
									{
										foreach (var specialization in completeSpecializations)
										{
											<div class="row specialization">
												<div class="col-md-1"></div>
												<div class="col-md-3 specialization-icon visible-md visible-lg"
													 style="background-image: url('@await MetadataService.ResolveAssetContainerAsync(specialization.ImageUrl, "large")');"></div>
												<div class="col-md-8">
													<span class="title">
														@specialization.Name
													</span>
													<br />
													<span class="description">
														@((await MetadataService.GetMetadataAsync()).SpecializationsMetadata.Specializations.First(s => s.Id == specialization.Id).Description)
													</span>
												</div>
											</div>
											<hr class="" />
										}
									}
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
			<div class="col-md-3">
				@await Html.PartialAsync("_Sidebar", sidebar)
			</div>
		</div>
	</div>
</main>

@section scripts {
	<script>
		var RecentGames = @Html.Raw(await Model.GameHistory?.Games.ToJavascriptArrayAsync(MetadataService));
	</script>
}