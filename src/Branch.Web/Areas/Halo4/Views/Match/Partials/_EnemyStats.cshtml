@using Branch.Helpers.Cryptography
@model GamePlayer
@{ 
	var ident = Sha1Cryptography.ComputeHashToString(Model.Gamertag).Remove(8);
}

<div class="tab-pane fade in weapons" id="@ident-weapons">
	@{
		var weaponGraphIdent = string.Format("player-weapons-{0}", ident);
	}
	<div class="graph-container hidden-xs">
		<!-- Graphs Will Return! - maybe.. -->
		<div id="@weaponGraphIdent" style="height: 250px; width: 700px; display: none;">
		</div>
	</div>

	<h2>All Weapons</h2>
	<hr />
	<table class="table weapons">
		<thead>
			<tr>
				<th>Weapon</th>
				<th>Kills</th>
				<th>Headshots</th>
				<th>Deaths</th>
				<th>Penalties</th>
				<th>Spread</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var weaponStat in Model.DamageTypeStats.OrderByDescending(w => MathHelper.CalculateSpread(w.Kills, w.Deaths, new[] { w.Betrayals, w.Suicides })))
			{
				<tr>
					<td>
						<a href="#" role="tooltip" title="@weaponStat.Name">
							<img alt="@weaponStat.Name"
								 src="@await MetadataService.ResolveAssetContainerAsync(weaponStat.ImageUrl, "medium")" />
						</a>
					</td>
					<td>
						@weaponStat.Kills
					</td>
					<td>
						@weaponStat.Headshots
					</td>
					<td>
						@weaponStat.Deaths
					</td>
					<td>
						@(weaponStat.Betrayals + weaponStat.Suicides)
					</td>
					<td>
						@MathHelper.CalculateSpread(weaponStat.Kills, weaponStat.Deaths, new[] { weaponStat.Betrayals, weaponStat.Suicides })
					</td>
				</tr>
			}
		</tbody>
	</table>
</div>


